<snippet>
	<content><![CDATA[
// include DSU struct for bridge tree
// include graph struct for bridge tree
// uses vector adj of the form pair<int, int> : {next node, edge id}
vector<int> vtd, is_bridge, tree_edge, t_in;
int timer = 0;

int bridge_dfs(vector<vector<pii>>& adj, int v, int p = -1) {
	
	// p is the id of parent edge
	t_in[v] = timer++;
	vtd[v] = 1;
	int retval = -1;

	for(auto e : adj[v]) {

		int u = e.fe, edge_id = e.se;

		if(tree_edge[edge_id] != -1) {

			continue;
		}

		if(vtd[u]) {

			tree_edge[edge_id] = 0;
			if((retval == -1) || (t_in[u] < t_in[retval])) retval = u;

		} else {

			tree_edge[edge_id] = 1;
			int cur = bridge_dfs(adj, u, edge_id);
			if((cur != -1) && ((retval == -1) || (t_in[cur] < t_in[retval]))) retval = cur;
		}
	}

	if((p != -1) && ((retval == -1) || (t_in[retval] >= t_in[v]))) {

		is_bridge[p] = 1;
	}

	return retval;
}

void find_bridges(vector<vector<pii>>& adj, vector<pii>& edges) {

	int N = (int)adj.size();
	int E = (int)edges.size();

	t_in.assign(N, 0);
	vtd.assign(N, 0);
	is_bridge.assign(E, 0);
	tree_edge.assign(E, -1);

	fr(v, 0, N) {

		if(!vtd[v]) {

			bridge_dfs(adj, v);
		}
	}
}

graph get_bridge_tree(graph& g) {

	find_bridges(g.g, g.edges);
	DSU og(g.n_nodes);

	fr(i, 0, (int)g.edges.size()) {

		if(is_bridge[i]) continue;
		og.dsu(g.edges[i].fe, g.edges[i].se);
	}

	graph bridge_tree(g.n_nodes);

	fr(i, 0, (int)g.edges.size()) {

		if(!is_bridge[i]) continue;
		bridge_tree.add_edge(og.component_of[g.edges[i].fe], og.component_of[g.edges[i].se], i);
	}

	return bridge_tree;
}
]]></content>
	<tabTrigger>bridge-finding</tabTrigger>
	<scope>source.c++</scope>
	<description>Finding bridges in a graph</description>
</snippet>

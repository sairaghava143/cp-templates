<snippet>
	<content><![CDATA[
template<typename T>
struct hld_t {

	int tl;
	vector<T> t;

	void init(int l, T val) {

		tl = l;
		t = vector<T>(tl << 2, val);
	}

	T task(T child1, T child2) {
	
		return child1 + child2;
	}
	
	void update(int node, int l, int r, int pos, T val) {
	
		if(l == r) {
	
			t[node] = val;
	
		} else {
	
			int mid = (l + r) >> 1;
	
			if(pos <= mid) {
	
				update(node << 1, l, mid, pos, val);
	
			} else {
	
				update((node << 1) + 1, mid + 1, r, pos, val);
			}
	
			t[node] = task(t[node << 1], t[(node << 1) + 1]);
		}
	}

	void update(int pos, T val) {

		update(1, 0, tl - 1, pos, val);
	}
	
	T query(int node, int l, int r, int lq, int rq) {
	
		if(lq > rq) {
	
			return 0;
	
		} else if(lq <= l && rq >= r) {
	
			return t[node];
	
		} else {
	
			int mid = (l + r) >> 1;
			return task(query(node << 1, l, mid, lq, min(rq, mid)), query((node << 1) + 1, mid + 1, r, max(lq, mid + 1), rq));
		}
	}

	T query(int lq, int rq) {

		return query(1, 0, tl - 1, lq, rq);
	}
	
	void build(vector<int>& v, int node, int l, int r) {
	
		if(l == r) {
	
			t[node] = attribute[v[l]];
			// replace attribute with appropriate variable
	
		} else {
	
			int mid = (l + r) >> 1;
			build(v, node << 1, l, mid);
			build(v, (node << 1) + 1, mid + 1, r);
			t[node] = task(t[node << 1], t[(node << 1) + 1]);
		}
	}

	void build(vector<int>& v) {

		build(v, 1, 0, tl - 1);
	}
};


template<typename T>
struct hld {

	int N;
	vector<int> hld_path;
	vector<int> pos;
	vector<int> heavy_of;
	vector<int> head_of;
	vector<int> parent_of;

	hld_t<T> t;

	hld(vector<vector<int>>& adj) {

		N = (int)adj.size();

		hld_path.clear();
		hld_path.reserve(N);
		pos.clear();
		pos.resize(N);
		heavy_of.clear();
		heavy_of.resize(N, -1);
		head_of.clear();
		head_of.resize(N);
		parent_of.clear();
		parent_of.resize(N);

		t.init(N, 0);

		parent_of[0] = 0;
		dfs(adj, 0);
		head_of[0] = 0;
		decompose(adj, 0);

		t.build(hld_path);
	}

	int dfs(vector<vector<int>>& adj, int node) {

		int subtree_size = 1;
		int current_heavy_size = -1;

		for(int next : adj[node]) {

			if(next == parent_of[node]) continue;

			parent_of[next] = node;
			int next_size = dfs(adj, next);
			subtree_size += next_size;

			if(next_size > current_heavy_size) {

				current_heavy_size = next_size;
				heavy_of[node] = next;
			}
		}

		return subtree_size;
	}

	void decompose(vector<vector<int>>& adj, int node) {

		pos[node] = hld_path.size();
		hld_path.push_back(node);

		if(heavy_of[node] != -1) {

			head_of[heavy_of[node]] = head_of[node];
			decompose(adj, heavy_of[node]);
		}

		for(int next : adj[node]) {

			if(next == heavy_of[node] || next == parent_of[node]) continue;

			head_of[next] = next;
			decompose(adj, next);
		}
	}

	T task(T v1, T v2) {

		return t.task(v1, v2);
	}

	T query(int node, int ancestor) {

		T retval = 0;

		for(; head_of[node] != head_of[ancestor]; node = parent_of[head_of[node]]) {

			retval = task(retval, t.query(pos[head_of[node]], pos[node]));
		}

		retval = task(retval, t.query(pos[ancestor], pos[node]));
		return retval;
	}

	void update(int node, T value) {

		t.update(pos[node], value);
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>hld_struct</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
	<description>Naman's HLD Struct</description>
</snippet>

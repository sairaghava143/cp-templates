<snippet>
	<content><![CDATA[
// dsu() and find() in O(log) time
// rollback() in O(1)

struct DSU {

	DSU(){}

	int N;
	vector<int> parent, sz;
	vector<pair<int, int>> history;

	DSU(int _N) : N(_N) {

		parent = vector<int>(N);
		sz = vector<int>(N, 1);
		iota(parent.begin(), parent.end(), 0);
	}

	int find(int v) {

		if(parent[v] == v) return v;
		else return find(parent[v]);
	}

	bool dsu(int u, int v) {

		u = find(u); v = find(v);
		if(u == v) return false;

		if(sz[v] > sz[u]) swap(u, v);
		history.emplace_back(v, u);
		parent[v] = u;
		sz[u] += sz[v];
		return true;
	}

	void rollback() {

		auto [v, u] = history.back();
		history.pop_back();
		sz[u] -= sz[v];
		parent[v] = v;
	}
};


struct query {
    int v, u;
    bool united;
    query(int _v, int _u) : v(_v), u(_u) {
    }
};

struct QueryTree {
    vector<vector<query>> t;
    DSU dsu;
    int T;

    QueryTree() {}

    QueryTree(int _T, int n) : T(_T) {
        dsu = DSU(n);
        t.resize(4 * T + 4);
    }

    void add_to_tree(int v, int l, int r, int ul, int ur, query& q) {
        if (ul > ur)
            return;
        if (l == ul && r == ur) {
            t[v].push_back(q);
            return;
        }
        int mid = (l + r) / 2;
        add_to_tree(2 * v, l, mid, ul, min(ur, mid), q);
        add_to_tree(2 * v + 1, mid + 1, r, max(ul, mid + 1), ur, q);
    }

    void add_query(query q, int l, int r) {
        add_to_tree(1, 0, T - 1, l, r, q);
    }

    void dfs(int v, int l, int r, long long& ans) {
        for (query& q : t[v]) {
            q.united = dsu.dsu(q.v, q.u);
        }
        if (l == r){
            // do stuff
        }
        else {
            int mid = (l + r) / 2;
            dfs(2 * v, l, mid, ans);
            dfs(2 * v + 1, mid + 1, r, ans);
        }
        for (query q : t[v]) {
            if (q.united)
                dsu.rollback();
        }
    }

    long long solve() {
        long long ans = 0;
        dfs(1, 0, T - 1, ans);
        return ans;
    }
};
]]></content>
	<tabTrigger>dynamic-connectivity</tabTrigger>
	<scope>source.c++</scope>
	<description>Dynamic Connectivity using rollback DSU and segment tree</description>
</snippet>

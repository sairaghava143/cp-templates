<snippet>
	<content><![CDATA[
vector<int> head_of;
vector<int> parent_of;
vector<int> heavy_of;
vector<int> hld_vec;
vector<int> hld_pos;
int hld_vec_pointer;
vector<int> hld_segtree;


int hld_segtree_task(int child1, int child2) {

	return child1 + child2;
}

void hld_segtree_update(vector<int>& segment_tree, int node, int l, int r, int pos, int val) {

	if(l == r) {

		segment_tree[node] = val;

	} else {

		int mid = (l + r) >> 1;

		if(pos <= mid) {

			hld_segtree_update(segment_tree, node << 1, l, mid, pos, val);

		} else {

			hld_segtree_update(segment_tree, (node << 1) + 1, mid + 1, r, pos, val);
		}

		segment_tree[node] = hld_segtree_task(segment_tree[node << 1], segment_tree[(node << 1) + 1]);
	}
}


int hld_segtree_query(vector<int>& segment_tree, int node, int l, int r, int lq, int rq) {

	if(lq > rq) {

		return 0;

	} else if(lq <= l && rq >= r) {

		return segment_tree[node];

	} else {

		int mid = (l + r) >> 1;
		return hld_segtree_task(hld_segtree_query(segment_tree, node << 1, l, mid, lq, min(rq, mid)), hld_segtree_query(segment_tree, (node << 1) + 1, mid + 1, r, max(lq, mid + 1), rq));
	}
}


void hld_segtree_build(vector<int>& segment_tree, vector<int>& v, int node, int l, int r) {

	if(l == r) {

		segment_tree[node] = attribute[v[l]];
		// replace attribute with appropriate variable

	} else {

		int mid = (l + r) >> 1;
		hld_segtree_build(segment_tree, v, node << 1, l, mid);
		hld_segtree_build(segment_tree, v, (node << 1) + 1, mid + 1, r);
		segment_tree[node] = hld_segtree_task(segment_tree[node << 1], segment_tree[(node << 1) + 1]);
	}
}


int hld_dfs(int node) {

	int subtree_size = 1;
	int current_heavy_size = 0;

	for(int next : adj[node]) {

		if(next == parent_of[node]) {

			continue;
		}

		parent_of[next] = node;
		int next_size = dfs(next);
		subtree_size += next_size;

		if(next_size > current_heavy_size) {

			current_heavy_size = next_size;
			heavy_of[node] = next;
		}
	}

	return subtree_size;
}


void decompose(int node, int head) {

	head_of[node] = head;
	hld_vec[hld_vec_pointer++] = node;
	hld_pos[node] = hld_vec_pointer - 1;

	if(heavy_of[node] != -1) {

		decompose(heavy_of[node], head);
	}

	for(int next : adj[node]) {

		if(next != heavy_of[node] && next != parent_of[node]) {

			decompose(next, next);
		}
	}
}


int hld_query_task(int x, int y) {

	return x + y;
}


int hld_query(int node, int ancestor) {

	int retval = 0;

	if(node == -1) {

		return 0;
	}

	if(head_of[node] == head_of[ancestor]) {

		retval = hld_query_task(retval, hld_segtree_query(hld_segtree, 1, 0, n_nodes - 1, hld_pos[ancestor], hld_pos[node]));
		debug(retval);

	} else {

		retval = hld_query_task(retval, hld_segtree_query(hld_segtree, 1, 0, n_nodes - 1, hld_pos[head_of[node]], hld_pos[node]));
		retval = hld_query_task(retval, hld_query(parent_of[head_of[node]], ancestor));
	}

	return retval;
}

void hld_init(int num_nodes) {

	int hld_len = num_nodes + 5;

	hld_pos.clear();
	hld_vec.clear();
	hld_segtree.clear();
	head_of.clear();
	heavy_of.clear();

	hld_pos.resize(hld_len);
	hld_vec.resize(hld_len);
	hld_segtree.resize(hld_len << 2);
	head_of.resize(hld_len);
	heavy_of.resize(hld_len);
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>hld</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
	<description>Naman's heavy-light decomposition snippet!</description>>
</snippet>

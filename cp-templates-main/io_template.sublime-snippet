<snippet>
	<content><![CDATA[
template<typename F, typename S>
ostream& operator <<(ostream& ostream, pair<F, S>& p) {

	cout << p.first << " " << p.second;
	return ostream;
}

template<typename T>
ostream& operator <<(ostream& ostream, vector<T>& v) {

	for(auto& element : v) {

		cout << element << " ";
	}

	return ostream;
}

template<typename T>
ostream& operator <<(ostream& ostream, vector<vector<T>>& v) {

	for(auto& row : v) {

		for(auto& cell : row) {

			cout << cell << " ";
		}

		cout << "\n";
	}

	return ostream;
}

template<typename T>
ostream& operator <<(ostream& ostream, set<T>& v) {

	for(auto& element: v) {

		cout << element << " ";
	}

	return ostream;
}

template<typename T>
ostream& operator <<(ostream& ostream, multiset<T>& v) {

	for(auto& element: v) {

		cout << element << " ";
	}

	return ostream;
}

template<typename T>
ostream& operator <<(ostream& ostream, unordered_set<T>& v) {

	for(auto& element: v) {

		cout << element << " ";
	}

	return ostream;
}

template<typename F, typename S>
ostream& operator <<(ostream& ostream, map<F, S>& v) {

	for(auto& kv : v) {

		cout << kv.first << ": " << kv.second << "\n";
	}

	return ostream;
}

template<typename F, typename S>
ostream& operator <<(ostream& ostream, unordered_map<F, S>& v) {

	for(auto& kv : v) {

		cout << kv.first << ": " << kv.second << "\n";
	}

	return ostream;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>io_template</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
	<description>Naman's IO template</description>
</snippet>

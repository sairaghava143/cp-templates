<snippet>
	<content><![CDATA[
vector<${1:big}> lazy;
vector<${1:big}> setv;


${1:big} task(${1:big} child1, ${1:big} child2) {
 
	return ${2:child1 + child2};
}
 
 
void push(vector<${1:big}>& segment_tree, int node, int l, int r) {
 
	int child1 = node << 1;
	int child2 = (node << 1) + 1;
	int mid = (l + r) >> 1;
 
	if(setv[node] != -1) {
 
		lazy[child1] = 0;
		lazy[child2] = 0;
		setv[child1] = setv[node];
		setv[child2] = setv[node];
		segment_tree[child1] = setv[node] * (mid - l + 1);
		segment_tree[child2] = setv[node] * (r - mid);
		setv[node] = -1;
	}
 
	lazy[child1] += lazy[node];
	lazy[child2] += lazy[node];
	segment_tree[child1] += (mid - l + 1) * lazy[node];
	segment_tree[child2] += (r - mid) * lazy[node];
	lazy[node] = 0;
}
 
 
void make(vector<${1:big}>& segment_tree, int node, int l, int r, int lq, int rq, ${1:big} val) {
 
	if(lq > rq) {
 
		return;
	}
 
	if(l == lq && r == rq) {
 
		lazy[node] = 0;
		segment_tree[node] = (r - l + 1) * val;
		setv[node] = val;
 
	} else {
 
		push(segment_tree, node, l, r);
 
		int mid = (l + r) >> 1;
		make(segment_tree, node << 1, l, mid, lq, min(mid, rq), val);
		make(segment_tree, (node << 1) + 1, mid + 1, r, max(mid + 1, lq), rq, val);
 
		segment_tree[node] = task(segment_tree[node << 1], segment_tree[(node << 1) + 1]);
	}
}
 
 
void add(vector<${1:big}>& segment_tree, int node, int l, int r, int lq, int rq, ${1:big} val) {
 
	if(lq > rq) {
 
		return;
	}
 
	if(l == lq && r == rq) {
 
		lazy[node] += val;
		segment_tree[node] += (r - l + 1) * val;
 
	} else {
 
		push(segment_tree, node, l, r);
 
		int mid = (l + r) >> 1;
		add(segment_tree, node << 1, l, mid, lq, min(mid, rq), val);
		add(segment_tree, (node << 1) + 1, mid + 1, r, max(mid + 1, lq), rq, val);
 
		segment_tree[node] = task(segment_tree[node << 1], segment_tree[(node << 1) + 1]);
	}
}
 
 
${1:big} query(vector<${1:big}>& segment_tree, int node, int l, int r, int lq, int rq) {
 
	if(lq > rq) {
 
		return ${3:0};
 
	} else if(lq <= l && rq >= r) {
 
		return segment_tree[node];
 
	} else {
 
		push(segment_tree, node, l, r);
		int mid = (l + r) >> 1;
		return task(query(segment_tree, node << 1, l, mid, lq, min(rq, mid)), query(segment_tree, (node << 1) + 1, mid + 1, r, max(lq, mid + 1), rq));
	}
}
 
 
void build(vector<${1:big}>& segment_tree, vector<${1:big}>& v, int node, int l, int r) {
 
	if(l == r) {
 
		segment_tree[node] = v[l];
 
	} else {
 
		int mid = (l + r) >> 1;
		build(segment_tree, v, node << 1, l, mid);
		build(segment_tree, v, (node << 1) + 1, mid + 1, r);
		segment_tree[node] = task(segment_tree[node << 1], segment_tree[(node << 1) + 1]);
	}
}

void build(vector<${1:big}>& v) {
	
	int sz = v.size();
	build(t, v, 1, 0, tl - 1);
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>lazysegtree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
	<description>Naman's Lazy Propagation Segment Tree!</description>
</snippet>
<snippet>
	<content><![CDATA[
${1:big} task(${1:big} child1, ${1:big} child2) {

	return ${2:child1 + child2};
}

void update(vector<${1:big}>& segment_tree, int node, int l, int r, int pos, ${1:big} val) {

	if(l == r) {

		segment_tree[node] = val;

	} else {

		int mid = (l + r) >> 1;

		if(pos <= mid) {

			update(segment_tree, node << 1, l, mid, pos, val);

		} else {

			update(segment_tree, (node << 1) + 1, mid + 1, r, pos, val);
		}

		segment_tree[node] = task(segment_tree[node << 1], segment_tree[(node << 1) + 1]);
	}
}


${1:big} query(vector<${1:big}>& segment_tree, int node, int l, int r, int lq, int rq) {

	if(lq > rq) {

		return ${3:0};

	} else if(lq <= l && rq >= r) {

		return segment_tree[node];

	} else {

		int mid = (l + r) >> 1;
		return task(query(segment_tree, node << 1, l, mid, lq, min(rq, mid)), query(segment_tree, (node << 1) + 1, mid + 1, r, max(lq, mid + 1), rq));
	}
}


void build(vector<${1:big}>& segment_tree, vector<${1:big}>& v, int node, int l, int r) {

	if(l == r) {

		segment_tree[node] = v[l];

	} else {

		int mid = (l + r) >> 1;
		build(segment_tree, v, node << 1, l, mid);
		build(segment_tree, v, (node << 1) + 1, mid + 1, r);
		segment_tree[node] = task(segment_tree[node << 1], segment_tree[(node << 1) + 1]);
	}
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segtree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
	<description>Recursive integer segment tree snippet.</description>
</snippet>
